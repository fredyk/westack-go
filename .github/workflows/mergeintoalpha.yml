name: Accept PRs into alpha
on:
  pull_request:
    branches:
      - alpha
    types: [opened, synchronize, reopened]

jobs:

    run_tests:
      runs-on: ubuntu-latest
      strategy:
#          max-parallel: 1
        matrix:
          go: [ '1.20.1', '1.20.6' ]
      env:
        WST_ADMIN_USERNAME: admin
        WST_ADMIN_PWD: testadmin
        PPROF_AUTH_USERNAME: test
        PPROF_AUTH_PASSWORD: abcd1234.
        GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN }}
      steps:
        - name: Checkout master
          uses: actions/checkout@v3
          with:
            ref: master

        - name: Checkout alpha
          run: |
            git fetch # origin alpha:alpha
            git checkout -b alpha origin/alpha
            git pull

        - name: Merge PR
          run: |
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git merge --no-edit --no-ff --allow-unrelated-histories ${{ github.event.pull_request.head.sha }}

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: ${{ matrix.go }}
            check-latest: true
            cache-dependency-path: ${{ github.workspace }}/go.sum

        - name: Setup Golangci-lint with cache
          timeout-minutes: 15
#          uses: actions/cache@v2
#          with:
#              path: ${{ github.workspace }}/.cache/golangci-lint
#              key: ${{ runner.os }}-golangci-lint-${{ hashFiles('**/go.sum') }}
#              restore-keys: |
#                ${{ runner.os }}-golangci-lint-
#              args: |
#                go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
#                go install github.com/securego/gosec/v2/cmd/gosec@latest
          run: |
            go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
            go install github.com/securego/gosec/v2/cmd/gosec@latest

        - name: Install jq
          run: |
            sudo apt-get install -y jq

        - name: Run Gosec Security Scanner
          id: golangci_lint
          run: |
            pwd
            ls -la
            golangci-lint run --timeout 10m --disable-all --enable=gosec --out-format=json ./... > results.json || true
            result=0
            detailed_issues=""
            # Parse results.json
            if [ -f results.json ]; then
              result=$(cat results.json | jq '.Issues | length')
              detailed_issues=$(cat results.json | jq '.Issues')
            fi
            if [ $result -ne 0 ]; then
              echo "Gosec found issues"
              # Set output variable
              echo "issues_found=true" >> $GITHUB_OUTPUT
              # echo "detailed_issues=$detailed_issues" >> $GITHUB_OUTPUT
              # Error: Unable to process file command 'output' successfully.
              # Error: Invalid format '  {'
              # Escape curly braces and parentheses
              detailed_issues=$(echo $detailed_issues | sed 's/{/\\{/g' | sed 's/}/\\}/g' | sed 's/(/\\(/g' | sed 's/)/\\)/g')
              echo "detailed_issues=$detailed_issues" >> $GITHUB_OUTPUT

            else
              echo "Gosec found no issues"
              # Set output variable
              # echo "::set-output name=issues_found::false"
              echo "issues_found=false" >> $GITHUB_OUTPUT
            fi
            exit 0

        - name: Upload results.json
          uses: actions/upload-artifact@v2
          with:
              name: results.json
              path: results.json

        - name: Exit if Gosec found issues
          run: |
            # Check ${{ steps.golangci_lint.outputs.issues_found }}
            issues_found="${{ steps.golangci_lint.outputs.issues_found }}"
            if [ "$issues_found" = "true" ]; then
              details="${{ steps.golangci_lint.outputs.detailed_issues }}"
              # Unescape curly braces
              details=$(echo $details | sed 's/\\{/{/g' | sed 's/\\}/}/g')
              # json pretty print
              details=$(echo $details | jq .)
              echo "Gosec found issues:"
              echo $details
              exit 1
            else
              echo "Gosec found no issues at '${{ steps.golangci_lint.outputs.issues_found }}'"
            fi

        - name: Install MongoDB
          run: |
            sudo apt-get update
            sudo apt-get install -y dirmngr gnupg apt-transport-https ca-certificates software-properties-common
            wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -
            echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
            sudo apt-get update
            sudo apt-get install -y mongodb-org

        - name: Start MongoDB
          run: sudo systemctl start mongod

        - name: Test WeStack
          run: |
            # Try to restore from cache
            if [ -d ${{ github.workspace }}/.cache/go-build ]; then
              echo "Restoring from cache"
              cp -r ${{ github.workspace }}/.cache/go-build ${{ github.workspace }}/go/pkg
              # also mods
              cp -r ${{ github.workspace }}/.cache/mod ${{ github.workspace }}/go/pkg
            fi
            go mod download
            go test -v ./westack/tests -timeout 30m -coverprofile=coverage.txt -covermode=atomic -count=1
            # # Cache go-build
            # mkdir -p ${{ github.workspace }}/.cache
            # cp -r ${{ github.workspace }}/go/pkg ${{ github.workspace }}/.cache/go-build
            # # also mods
            # cp -r ${{ github.workspace }}/go/pkg ${{ github.workspace }}/.cache/mod
            # Where is go???
            echo "Go is at $(which go)"

        - name: Upload coverage.txt
          uses: actions/upload-artifact@v2
          with:
              name: coverage.txt
              path: coverage.txt

  #        - name: Create tag
  #          run: git tag -a v${{ steps.latest_tag.outputs.tag }}-alpha-${{ steps.date.outputs.date }} -m "v${{ steps.latest_tag.outputs.tag }}-alpha-${{ steps.date.outputs.date }}"
    push_to_alpha:
      runs-on: ubuntu-latest
      needs: [run_tests]
      env:
        GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN }}
      steps:

        - name: Create go tag with date
          id: date
          run: echo "::set-output name=date::$(date +'%Y%m%d%H%M')"

        - name: Fetch all tags
          run: git fetch --prune --unshallow --tags

        - name: Find latest tag with regex v\d+\.\d+\.\d+$ and fallback to 0.0.0, skipping -alpha and -beta
          id: latest_tag
          run: |
            latest_tag=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 | grep -v -E "alpha|beta" || echo "v0.0.0")
            major=$(echo $latest_tag | cut -d. -f1)
            major=${major#v}
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            patch=${patch%-*}
            patch=${patch%-*}
            latest_tag=${major}.${minor}.${patch}
            echo "Found latest tag: $latest_tag"
            major=$((major + 1))
            minor="0"
            patch="0"
            new_tag=${major}.${minor}.${patch}
            echo "Tagging new as: $new_tag"
            echo "::set-output name=tag::${new_tag}"

        - name: Create a new branch
          run: |
            git checkout -b v-${{ steps.latest_tag.outputs.tag }}-alpha HEAD

        - name: Push
          run: |
            git push origin alpha
            git push -u origin v-${{ steps.latest_tag.outputs.tag }}-alpha

        - name: Comments on the pull request and closes it
          run: |
            curl -X POST -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d '{"body": "This PR has been merged into alpha and tagged as ${{ steps.latest_tag.outputs.tag }}-alpha-${{ steps.date.outputs.date }}. Thanks for your contribution!"}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
            curl -X PATCH -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d '{"state": "closed"}' https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}
