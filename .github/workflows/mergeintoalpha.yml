name: Accept PRs into alpha
# Run only on last label
on:
  pull_request:
    types: [synchronize, reopened, labeled]
concurrency:
  group: ${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:

    run_tests:
      runs-on: ubuntu-latest
      timeout-minutes: 5
      strategy:
        matrix:
          go: [ '1.18', '1.19', '1.20.1', '1.20.6' ]
      env:
        WST_ADMIN_USERNAME: admin
        WST_ADMIN_PWD: testadmin
        PPROF_AUTH_USERNAME: test
        PPROF_AUTH_PASSWORD: abcd1234.
        GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN }}
        MIN_COVERAGE_THRESHOLD: 71.1
        WST_DB0_USERNAME: ${{ secrets.MONGO_DEV_USERNAME }}
        WST_DB0_PASSWORD: ${{ secrets.MONGO_DEV_PWD }}
        WST_DB1_USERNAME: ${{ secrets.MONGO_DEV_USERNAME }}
        WST_DB1_PASSWORD: ${{ secrets.MONGO_DEV_PWD }}
        WST_DB2_USERNAME: ${{ secrets.MONGO_DEV_USERNAME }}
        WST_DB2_PASSWORD: ${{ secrets.MONGO_DEV_PWD }}
        WST_DB_EXPECTED_TO_FAIL_USERNAME: ${{ secrets.MONGO_DEV_USERNAME }}
        WST_DB_EXPECTED_TO_FAIL_PASSWORD: ${{ secrets.MONGO_DEV_PWD }}
        WST_DB_EXPECTED_TO_BE_CLOSED_USERNAME: ${{ secrets.MONGO_DEV_USERNAME }}
        WST_DB_EXPECTED_TO_BE_CLOSED_PASSWORD: ${{ secrets.MONGO_DEV_PWD }}
        JWT_SECRET: abcd1234.
        GO_ENV: TESTING
      steps:
        - name: Checkout master
          uses: actions/checkout@v3
          with:
            ref: master

        - name: Checkout base branch
          run: |
            echo "Trying to merge PR into ${{ github.event.pull_request.base.ref }}"
            git fetch
            # Only if it is not master branch
            if [ "${{ github.event.pull_request.base.ref }}" != "master" ]; then
              git checkout -b ${{ github.event.pull_request.base.ref }} origin/${{ github.event.pull_request.base.ref }}
            fi
            git pull

        - name: Merge PR
          run: |
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"
            git merge --no-edit --allow-unrelated-histories ${{ github.event.pull_request.head.sha }}

        - name: Cache Go packages
          uses: actions/cache@v3
          with:
            path: |
              ~/.cache/go-build
              /opt/hostedtoolcache/go/${{ matrix.go }}/x64/pkg/mod
            key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
            restore-keys: |
              ${{ runner.os }}-go-${{ matrix.go }}-
              ${{ runner.os }}-go-
              ${{ runner.os }}-

        - name: Set up Go
          uses: actions/setup-go@v4
          with:
            go-version: ${{ matrix.go }}
            check-latest: true
            cache-dependency-path: ${{ github.workspace }}/go.sum

        - name: Test WeStack
          run: |
            if [ -d ${{ github.workspace }}/.cache/go-build ]; then
              echo "Restoring from cache"
              cp -r ${{ github.workspace }}/.cache/go-build ${{ github.workspace }}/go/pkg
              cp -r ${{ github.workspace }}/.cache/mod ${{ github.workspace }}/go/pkg
            fi
            go mod download
            cd westack/tests
            # Create a random number of 9 bytes
            random_sufix=$(openssl rand -hex 9)
            echo "Random sufix: $random_sufix"
            sed -i "s/\"database\": \"\(.*\)\",/\"database\": \"\1_$random_sufix\",/g" server/datasources*.json
            cat server/datasources.json
            go test -timeout 5m -c -coverpkg=../../../westack-go/... -covermode=atomic github.com/fredyk/westack-go/westack/tests -o output.test
            go tool test2json -t ./output.test -test.v -test.paniconexit0 -test.coverprofile ../../coverage.txt | jq -r 'select(.Output != "" and .Output != null) | .Output' | sed '/^$/d' | tee ../../test_output.txt 
            cd ../..
            # Select from test_output.txt only lines containing "coverage: "
            cat test_output.txt | grep "coverage: " > coverage.summary.txt
            # Where is go???
            echo "Go is at $(which go)"

        - name: Upload coverage.txt
          uses: actions/upload-artifact@v3
          with:
              name: coverage.txt
              path: coverage.txt

        - name: Upload coverage.summary.txt
          uses: actions/upload-artifact@v3
          with:
              name: coverage.summary.txt
              path: coverage.summary.txt

        - name: Upload test_output.txt
          uses: actions/upload-artifact@v3
          with:
              name: test_output.txt
              path: test_output.txt

        - name: Process tests output
          run: |
            # Select from test_output.txt only lines containing " FAIL: "
            all_failed_tests=$(cat test_output.txt | grep ' FAIL: ' | sed '/^$/d')
            if [ -n "$all_failed_tests" ]; then
              echo "Tests failed:"
              echo $all_failed_tests
              exit 1
            else
              echo "All tests passed"
            fi

        - name: Process coverage.summary.txt
          # skip for mongo 1.18
          if: matrix.go != '1.18'
          run: |
            # Parse coverage_lines to get coverage percentage. If any percentage is below $MIN_COVERAGE_THRESHOLD, exit with error
            # Also skip github.com/fredyk/westack-go/westack/tests
            coverage_lines=$(cat coverage.summary.txt | grep -v "coverage: \[no statements\]" | grep -v "coverage: \[no tests to run\]" | grep -v "github.com/fredyk/westack-go/westack/tests")
            echo "Target min coverage: $MIN_COVERAGE_THRESHOLD"
            echo "$coverage_lines" | while read -r line; do
              echo "$line"
              coverage=$(echo "$line" | sed 's/.*coverage: \([0-9]*\.[0-9]*\).*/\1/')
              echo "coverage: $coverage"
              if (( $(echo "$coverage < $MIN_COVERAGE_THRESHOLD" | bc -l) )); then
                echo "Coverage is below $MIN_COVERAGE_THRESHOLD"
                exit 1
              fi
            done

        # - name: Create temporary branch with random name
        #   if: contains(github.event.pull_request.labels.*.name, 'auto-merge')
        #   run: |
        #       git checkout -b temp-branch-${{ github.run_id }}

        # - name: Push temporary branch
        #   if: contains(github.event.pull_request.labels.*.name, 'auto-merge')
        #   run: |
        #       git fetch
        #       git config --global user.email "github-actions[bot]@users.noreply.github.com"
        #       git config --global user.name "github-actions[bot]"
        #       # git push origin temp-branch-${{ github.run_id }} --force || true
        #       # push using github rest API
        #       curl \
        #           -s \
        #           -X POST \
        #           -H "Accept: application/vnd.github.v3+json" \
        #           -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" \
        #           https://api.github.com/repos/${{ github.repository }}/git/refs \
        #           -d '{"ref":"refs/heads/temp-branch-'${{ github.run_id }}'","sha":"'${{ github.sha }}'"}'
        #       # curl \
        #       #     -s \
        #       #     -X PATCH \
        #       #     -H "Accept: application/vnd.github.v3+json" \
        #       #     -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" \
        #       #     https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} \
        #       #     -d '{"head":"temp-branch-'${{ github.run_id }}'"}'

    push_to_base:
      runs-on: ubuntu-latest
      timeout-minutes: 5
      if: contains(github.event.pull_request.labels.*.name, 'auto-merge')
      needs: [run_tests]
      env:
        GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN }}
      outputs:
        tag: ${{ steps.latest_tag.outputs.tag }}
        date: ${{ steps.date.outputs.date }}
      steps:

        - name: Checkout master
          uses: actions/checkout@v3
          with:
            ref: master

        - name: Fetch
          run: |
              git fetch
              # git checkout -b temp-branch-${{ github.run_id }} origin/temp-branch-${{ github.run_id }}
              # git pull

        - name: Create go tag with date
          id: date
          run: |
              # echo "::set-output name=date::$(date +'%Y%m%d%H%M')"
              echo "date=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

        - name: Fetch all tags
          run: git fetch --prune --unshallow --tags

        - name: Find latest tag with regex v\d+\.\d+\.\d+$ and fallback to 0.0.0, skipping -alpha and -beta
          id: latest_tag
          run: |
            latest_tag=$(git describe --tags --match "v[0-9]*.[0-9]*.[0-9]*" --abbrev=0 | grep -v -E "alpha|beta" || echo "v0.0.0")
            major=$(echo $latest_tag | cut -d. -f1)
            major=${major#v}
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            patch=${patch%-*}
            patch=${patch%-*}
            latest_tag=${major}.${minor}.${patch}
            echo "Found latest tag: $latest_tag"
            major=$((major + 1))
            minor="0"
            patch="0"
            new_tag=${major}.${minor}.${patch}
            echo "Tagging new as: $new_tag"
            # echo "::set-output name=tag::${new_tag}"
            echo "tag=${new_tag}" >> $GITHUB_OUTPUT

        - name: Push
          run: |
            # git fetch
            # # Push local temp branch to remote base branch
            # git checkout -b ${{ github.event.pull_request.base.ref }} origin/${{ github.event.pull_request.base.ref }}
            # git pull
            # git config --global user.email "github-actions[bot]@users.noreply.github.com"
            # git config --global user.name "github-actions[bot]"
            # # git merge --no-edit temp-branch-${{ github.run_id }}
            # # git push origin ${{ github.event.pull_request.base.ref }}
            # # if head starts with temp-branch-, then push to base ref. Test with regex
            # # if [[ "${{ github.event.pull_request.head.ref }}" =~ ^temp-branch-.* ]]; then
            # #   git push origin ${{ github.event.pull_request.base.ref }}
            # # else
            # #   # merge the current PR using Rest API, check response, and if not ok, exit with error
            curl \
                -s \
                -X PUT \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" \
                https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge \
                -d '{"commit_title":"Merge ${{ github.event.pull_request.head.ref }} into ${{ github.event.pull_request.base.ref }}","commit_message":"Merge ${{ github.event.pull_request.head.ref }} into ${{ github.event.pull_request.base.ref }}","merge_method":"merge"}' \
                -o merge_response.json
            # parse merge_response.json message to check if merge was successful. Use jq
            merge_response=$(cat merge_response.json)
            echo "merge_response: $merge_response"
            merge_response_message=$(echo $merge_response | jq -r '.message')
            echo "merge_response_message: $merge_response_message"
            if [ "$merge_response_message" != "Pull Request successfully merged" ]; then
              echo "ERROR: Merge failed"
              exit 1
            fi
            # # fi
            # # Get current commit hash
            # commit_hash=$(git rev-parse HEAD)
            # git checkout -b v-${{ steps.latest_tag.outputs.tag }}-alpha HEAD
            # git branch --set-upstream-to=origin/v-${{ steps.latest_tag.outputs.tag }}-alpha v-${{ steps.latest_tag.outputs.tag }}-alpha || true
            # # git pull --rebase || true
            # # git merge --no-edit temp-branch-${{ github.run_id }}
            # git reset --hard $commit_hash
            # # git push -f origin v-${{ steps.latest_tag.outputs.tag }}-alpha
            # # reset origin v-${{ steps.latest_tag.outputs.tag }}-alpha to $commit_hash using Rest API
            # # curl \
            # #     -s \
            # #     -X PATCH \
            # #     -H "Accept: application/vnd.github.v3+json" \
            # #     -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" \
            # #     https://api.github.com/repos/${{ github.repository }}/git/refs/heads/v-${{ steps.latest_tag.outputs.tag }}-alpha \
            # #     -d '{"sha":"'$commit_hash'"}'

    close_pr_success:
      runs-on: ubuntu-latest
      timeout-minutes: 5
      if: contains(github.event.pull_request.labels.*.name, 'auto-merge')
      needs: [run_tests, push_to_base]
      steps:

        - name: Sets the pull request milestone using ${{ needs.push_to_base.outputs.tag }}
          run: |
            # First converts tag "x.y.z" to milestone "vx.y"
            milestone_title=$(echo ${{ needs.push_to_base.outputs.tag }} | sed 's/\([0-9]*\.[0-9]*\)\.[0-9]*/v\1/')
            echo "Milestone: $milestone_title"
            # List milestones to obtain milestone number
            curl -s -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/milestones > milestones.json
            milestone_number=$(cat milestones.json | jq -r --arg milestone_title "$milestone_title" '.[] | select(.title == $milestone_title) | .number')
            # If not found, create milestone
            if [ -z "$milestone_number" ]; then
              echo "Milestone not found. Creating it"
              curl -X POST -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d "{\"title\":\"$milestone_title\"}" https://api.github.com/repos/${{ github.repository }}/milestones
              # List milestones to obtain milestone number
              curl -s -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/milestones > milestones.json
              milestone_number=$(cat milestones.json | jq -r --arg milestone_title "$milestone_title" '.[] | select(.title == $milestone_title) | .number')
            fi
            echo "Milestone number: $milestone_number"
            curl -X PATCH -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d "{\"milestone\":$milestone_number}" https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}

        - name: Always upload milestones.json
          if: always()
          uses: actions/upload-artifact@v3
          with:
              name: milestones.json
              path: milestones.json

        - name: Comments on the pull request and closes it
          run: |
            curl -X POST -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d '{"body": "This PR has been merged into ${{ github.event.pull_request.base.ref }}. Thanks for your contribution!"}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
            curl -X PATCH -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d '{"state": "closed"}' https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}

    close_pr_failure:
      runs-on: ubuntu-latest
      timeout-minutes: 5
      # Only if the pull request has the label 'auto-merge' and does not have the label 'close-on-success' and has failed
      if: always() && contains(github.event.pull_request.labels.*.name, 'auto-merge') && !contains(github.event.pull_request.labels.*.name, 'close-on-success') && contains(needs.*.result, 'failure')
      needs: [run_tests, push_to_base]
      steps:

        - name: Comments on the pull request and closes it
          run: |
              curl -X POST -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d '{"body": "This PR has not been merged into ${{ github.event.pull_request.base.ref }}. Please fix the issues and re-open the PR."}' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
              curl -X PATCH -H "Authorization: token ${{ secrets.PULL_REQUEST_TOKEN }}" -H "Content-Type: application/json" -d '{"state": "closed"}' https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}

    # cleanup_temp_branch:
    #   runs-on: ubuntu-latest
    #   timeout-minutes: 5
    #   if: always() && contains(github.event.pull_request.labels.*.name, 'auto-merge')
    #   needs: [run_tests, push_to_base]
    #   steps:
    #
    #     - name: Checkout master
    #       uses: actions/checkout@v3
    #       with:
    #         ref: master
    #
    #     - name: Delete temporary branch
    #       run: |
    #           git fetch
    #           git checkout -b temp-branch-${{ github.run_id }} origin/temp-branch-${{ github.run_id }}
    #           git pull
    #           git checkout master
    #           git branch -D temp-branch-${{ github.run_id }}
    #           git push origin --delete temp-branch-${{ github.run_id }}

    cleanup_head_branch:
      runs-on: ubuntu-latest
      timeout-minutes: 5
      if: always() && contains(github.event.pull_request.labels.*.name, 'delete-branch') && !contains(github.event.pull_request.labels.*.name, 'close-on-success')
      needs: [run_tests, push_to_base, close_pr_success, close_pr_failure]
      steps:

        - name: Checkout master
          uses: actions/checkout@v3
          with:
            ref: master

        - name: If tag 'delete-branch' was set on the pull request, delete the branch
          run: |
              # First fetch. Then guess if remote head branch still exists and delete it. If it doesn't exist, it will fail, but that's ok
              echo "Trying to delete branch ${{ github.event.pull_request.head.ref }}"
              git fetch
              git push origin --delete ${{ github.event.pull_request.head.ref }} || true
